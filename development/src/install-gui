#!/bin/sh

#######
#
#  `install-gui'.
#
#  This file is the gui installation program of GNU dr.
#
#  Copyright (C) 2008  Efstathios Chatzikyriakidis (stathis.chatzikyriakidis@gmail.com)
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#######

###
### string messages.
###

install_welcome="Welcome to the installation program."
install_exit="Exit from the installation program."

select_from_list="Select an option from the list."
gnu_gpl_info="GNU General Public License Information."
path_directory="Path directory."

must_be_root="You must be root to run the installation program."
must_install_program="You must install the following program:"
must_select_option="You must select an option."
must_input_value="You must input a value to continue."

progress_window="Progress Window."
info_window="Information Window."
warning_window="Warning Window."
error_window="Error Window."

insufficient_arguments="Call with insufficient arguments."

proc_done="Procedure done."
proc_error="Procedure error."

###
### functions.
###

##
# name: print_error.
#
# description: prints an error message and exits.
#
# argument: $1 -> message to print.
##
print_error () 
{
    [ $# -lt 1 ] && print_error "${insufficient_arguments}"
    zenity --error --title "${error_window}" --text "$1"
    exit 1
}

##
# name: print_warning.
#
# description: prints a warning message and
#              exits only if user wants to.
#
# argument: $1 -> message to print.
##
print_warning () 
{
    [ $# -lt 1 ] && print_error "${insufficient_arguments}"
    zenity --warning --title "${warning_window}" --text "$1"
    [ $? -eq 1 ] && exit 1
    return 0
}

##
# name: print_info.
#
# description: prints an information message.
#
# argument: $1 -> message to print.
##
print_info () 
{
    [ $# -lt 1 ] && print_error "${insufficient_arguments}"
    zenity --info --title "${info_window}" --text "$1"
    return 0
}

##
# name: print_file.
#
# description: prints the contents of a text file.
#
# argument: $1 -> file to print.
##
print_file () 
{ 
    [ $# -lt 1 ] && print_error "${insufficient_arguments}"
    zenity --text-info --title "${gnu_gpl_info}" \
    --width 600 --height 500 --filename="$1"
    return 0
}

##
# name: get_uid.
#
# description: outputs a numeric user id.
#
# argument: $1 -> a user name (optional).
##
get_uid () 
{
    id -u $1
    return 0
}

##
# name: is_user_root.
#
# description: returns true (0) if the user's UID=0.
#
# argument: $1 -> a user name (optional).
##
is_user_root ()
{
    [ "`get_uid $1`" -eq 0 ] && return 0
    return 1
}

##
# name: app_exist.
#
# description: return true (0) if an application exists.
#
# argument: $1 -> application to search for.
##
app_exist ()
{
    [ $# -lt 1 ] && print_error "${insufficient_arguments}"

    which "$1" > /dev/null 2>&1

    [ $? -eq 0 ] && return 0

    return 1
}

##
# name: check_apps.
#
# description: check the existence of essential commands.
#
# argument: none.
##
check_apps ()
{
    # an array of commands names.
    APPS[0]="zenity" ; APPS[3]="echo"
    APPS[1]="make"   ; APPS[4]="id"
    APPS[2]="gcc"    ; APPS[5]="printf"

    # check each command for existence.
    I=0
    while [ $I -lt ${#APPS[*]} ]
    do
        if ! app_exist "${APPS[I]}" ; then
            print_warning "${must_install_program} '${APPS[I]}'."
        fi

        I=$(($I+1)) # increase the loop counter.
    done

    unset I APPS
    return 0
}

###
### program starts here.
###

# check to see if the user is superuser.
if is_user_root; then
    # check for the existence of basic commands.
    check_apps

    # select what kind of procedure you want to be done.
    OPTION=`zenity --list --height 300 --title "${install_welcome}" \
    --text "Select which procedure you want to do." --width 350 \
    --radiolist --column "Select" --column "Procedure." TRUE \
    "Install" FALSE "Uninstall"`

    # print the menu to the user.

    # set `OPTION' values depending on user input.
    case $OPTION in
        "Install") OPTION="install"   ;;
      "Uninstall") OPTION="uninstall" ;;

                *) print_info "${must_select_option}" 
                   exit 1 ;;
    esac

    # are you sure you want to uninstall the program?
    if [ "$OPTION" = "uninstall" ]; then
        print_warning "Are you sure you want to continue?"
    fi

    if [ "$OPTION" = "uninstall" -o "$OPTION" = "install" ]; then
        # just print basic info in order to inform the user.
        print_info "The program needs some location paths directories."

        # suggest some basic paths (we need it for 
        # installation/unistallation). if there is
        # no satisfied option the user will input
        # the value manually.

        # ask for manual page input.
        m=`zenity --list --title "${select_from_list}" --text \
        "Input manual pages directory path." --column "${path_directory}" \
        "/usr/share/man/man1" "/usr/local/man/man1" "/usr/local/share/man/man1"`

        if [ $? -eq 1 -o -z "$m" ]; then

            # manual input.
            m=`zenity --entry --title "${input_window}" --text \
            "Input manual pages directory path." \
            --entry-text "/usr/share/man/man1"`

            [ $? -eq 1 ] && print_error "${must_input_value}"

        fi

        # ask for info page input.
        i=`zenity --list --title "${select_from_list}" --text \
        "Input info pages directory path." --column "${path_directory}" \
        "/usr/share/info" "/usr/local/info" "/usr/local/share/info" `

        if [ $? -eq 1 -o -z "$i" ]; then

            # manual input.
            i=`zenity --entry --title "${input_window}" --text \
            "Input info pages directory path." --entry-text "/usr/share/info"`

            [ $? -eq 1 ] && print_error "${must_input_value}"

        fi

        # ask for binary input.
        b=`zenity --list --title "${select_from_list}" --text \
        "Input binary directory path." --column "${path_directory}" \
        "/usr/bin" "/usr/sbin" "/usr/local/bin" "/usr/local/sbin"`

        if [ $? -eq 1 -o -z "$b" ]; then

            # manual input.
            b=`zenity --entry --title "${input_window}" --text \
            "Input binary directory path." --entry-text "/usr/bin"`

            [ $? -eq 1 ] && print_error "${must_input_value}"

        fi
    fi

    # do the appropriate procedure.
    if [ "$OPTION" = "install" ]; then

        print_file "../COPYING"

        make install bin_path="${b}" info_path="${i}" \
        man_path="${m}" | zenity --progress --width 300 --text \
        "Installing program.." --title "${progress_window}" --pulsate

    elif [ "$OPTION" = "uninstall" ]; then

        make uninstall bin_path="${b}" info_path="${i}" \
        man_path="${m}" | zenity --progress --width 300 --text \
        "Uninstalling program." --title "${progress_window}" --pulsate

    fi
else
    print_error "${must_be_root}"
fi
